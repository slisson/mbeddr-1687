package de.slisson.mps.mbeddr1687.editor;

/*Generated by MPS */

import com.mbeddr.mpsutil.grammarcells.runtime.AbstractGrammarActionDescriptor;
import com.mbeddr.mpsutil.grammarcells.runtime.IGrammarActionsDescriptor;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import com.mbeddr.mpsutil.grammarcells.runtime.GrammarCellsUtil;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.editor.menus.substitute.SubstituteMenuItemWrapper;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.mpsutil.grammarcells.runtime.menu.GrammarCellsSubstituteMenuItem;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import com.mbeddr.mpsutil.grammarcells.runtime.Parser;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import com.mbeddr.mpsutil.grammarcells.runtime.MultiTextActionItem;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import com.mbeddr.mpsutil.grammarcells.runtime.SavedCaretPosition;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import com.mbeddr.mpsutil.grammarcells.runtime.IToken;
import com.mbeddr.mpsutil.grammarcells.runtime.IRule;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;

public class GrammarActionsDescriptor extends AbstractGrammarActionDescriptor implements IGrammarActionsDescriptor {

  public static final GrammarActionsDescriptor INSTANCE = new GrammarActionsDescriptor();

  @Override
  public List<SubstituteMenuItem> getActions(final SubstituteMenuContext _context, final SAbstractConcept expectedOutputConceptExactly) {
    final List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());

    ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
      public Iterable<SubstituteMenuItem> query() {
        List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
        if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, "de.slisson.mps.mbeddr1687.structure.ExpressionStatement"))) {
          final SAbstractConcept wrappedConcept = MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL, "de.slisson.mps.mbeddr1687.structure.Expression");
          for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, "de.slisson.mps.mbeddr1687.structure.ExpressionStatement"), _context.getModel(), ExpressionStatement_Editor.class))) {
            final SConcept outputConcept = ((SConcept) subconcept);

            final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

            boolean wrapRequired = !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept)));
            if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept)) && wrapRequired) {

              boolean isApplicable = GrammarCellsUtil.canBeChild(outputConcept, _context);
              isApplicable &= new Object() {
                public boolean query(SAbstractConcept expectedConcept) {
                  System.out.println("ExpressionStatement wrapper condition");
                  return true;
                }
              }.query(expectedOutputConcept);
              if (isApplicable) {
                List<SubstituteMenuItem> actions = _context.withLink(MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr")).createItems(new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(_context.getEditorContext().getRepository()), wrappedConcept));
                List<SubstituteMenuItem> wrappedActions = ListSequence.fromList(actions).where(new IWhereFilter<SubstituteMenuItem>() {
                  public boolean accept(SubstituteMenuItem it) {
                    boolean isApplicable = true;
                    final SAbstractConcept wrappedConcept = it.getOutputConcept();
                    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(wrappedConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
                      return false;
                    }
                    return isApplicable;
                  }
                }).select(new ISelector<SubstituteMenuItem, SubstituteMenuItem>() {
                  public SubstituteMenuItem select(SubstituteMenuItem it) {
                    SubstituteMenuItem wrapper = new SubstituteMenuItemWrapper(it) {
                      private SNode wrappedNode;
                      @Override
                      public SNode createNode(@NotNull String pattern) {
                        SNode nodeToWrap = super.createNode(pattern);
                        wrappedNode = nodeToWrap;
                        SNode wrapper = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(outputConcept), null);
                        SLinkOperations.setTarget(wrapper, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), SNodeOperations.cast(nodeToWrap, MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL, "de.slisson.mps.mbeddr1687.structure.Expression")));
                        return wrapper;
                      }
                      @Override
                      public SAbstractConcept getOutputConcept() {
                        return outputConcept;
                      }

                      @Override
                      public void select(@NotNull SNode createdNode, @NotNull String pattern) {
                        GrammarCellsSubstituteMenuItem.select(_context.getEditorContext().getEditorComponent(), createdNode);
                      }
                    };
                    return wrapper;
                  }
                }).toListSequence();

                ListSequence.fromList(result).addSequence(ListSequence.fromList(wrappedActions));
              }

            }
          }
        }
        return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
          public boolean accept(SubstituteMenuItem it) {
            return it != null;
          }
        }).toListSequence();
      }
    }.query()));
    ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
      public Iterable<SubstituteMenuItem> query() {
        List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
        if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L, "de.slisson.mps.mbeddr1687.structure.NumberLiteral"))) {
          final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

          for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L, "de.slisson.mps.mbeddr1687.structure.NumberLiteral"), _context.getModel(), NumberLiteral_Editor.class))) {
            final SConcept outputConcept = ((SConcept) subconcept);

            if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
              boolean isApplicable = GrammarCellsUtil.canBeChild(outputConcept, _context);
              if (isApplicable) {
                ListSequence.fromList(result).addElement(new GrammarCellsSubstituteMenuItem(_context) {
                  private SProperty myProperty = MetaAdapterFactory.getProperty(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L, 0x246dff530ab3a414L, "value");

                  public String getDescriptionText(String pattern) {
                    return null;
                  }
                  public String getMatchingText(String pattern) {
                    return pattern;
                  }
                  @Override
                  public boolean canExecute(@NotNull String pattern) {
                    if ((pattern == null || pattern.length() == 0)) {
                      return false;
                    }
                    return GrammarCellsUtil.isValidPropertyValue(myProperty, expectedOutputConceptExactly, pattern);
                  }
                  @Override
                  public boolean canExecuteStrictly(@NotNull String pattern) {
                    return canExecute(pattern);
                  }

                  @Override
                  public SNode createNode(@NotNull String pattern) {
                    SNode newNode = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(expectedOutputConceptExactly), null);
                    SPropertyOperations.set(newNode, MetaAdapterFactory.getProperty(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L, 0x246dff530ab3a414L, "value"), GrammarCellsUtil.toInternalPropertyValue(myProperty, pattern));
                    return newNode;
                  }


                  @Override
                  public void select(@NotNull SNode newNode, @NotNull String pattern) {
                    super.select(newNode, pattern);
                  }

                  @Override
                  public SAbstractConcept getOutputConcept() {
                    return MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L, "de.slisson.mps.mbeddr1687.structure.NumberLiteral");
                  }
                });
              }
            }

          }
        }
        return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
          public boolean accept(SubstituteMenuItem it) {
            return it != null;
          }
        }).toListSequence();
      }
    }.query()));


    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
      public boolean accept(SubstituteMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  protected List<TransformationMenuItem> doGetSideTransformActions(final TransformationMenuContext _context) {
    final List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());

    {
      boolean sideEnabled = false;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
      if (sideEnabled) {
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
          public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
            List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
            if (_context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM) {
              final SNode sourceNode = new Parser(_context.getModel()).isEndOf(_context.getNode(), _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM, MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL, "de.slisson.mps.mbeddr1687.structure.Expression"), null);

              if (sourceNode != null) {
                final SAbstractConcept sourceNodeConcept = SNodeOperations.getConcept(sourceNode);
                SContainmentLink link = sourceNode.getContainmentLink();
                SAbstractConcept expectedConcept = (link == null ? null : link.getTargetConcept());
                for (final SAbstractConcept subconcept : GrammarCellsUtil.getVisibleSubconceptsNonAbstract(MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, "de.slisson.mps.mbeddr1687.structure.ExpressionStatement"), _context.getModel(), ExpressionStatement_Editor.class)) {
                  boolean wrapperAllowed = expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(subconcept), SNodeOperations.asSConcept(expectedConcept));
                  if (wrapperAllowed) {
                    final Iterable<String> matchingText = Sequence.<String>singleton(";");
                    if (Sequence.fromIterable(matchingText).isNotEmpty()) {
                      boolean sideTransformationEnabled = ModelConstraints.canBeParent(SNodeOperations.getParent(sourceNode), subconcept, sourceNode.getContainmentLink(), null);
                      sideTransformationEnabled &= ModelConstraints.canBeAncestor(SNodeOperations.getParent(sourceNode), subconcept, sourceNode.getContainmentLink(), null);
                      if (sideTransformationEnabled) {
                        ListSequence.fromList(result).addSequence(Sequence.fromIterable(new MultiTextActionItem(matchingText, _context) {
                          public String getDescriptionText(String string) {
                            return NodePresentationUtil.descriptionText(subconcept);
                          }
                          @Override
                          public void execute(@NotNull String pattern) {
                            doSubstitute(_context.getEditorContext(), pattern);
                          }
                          protected SNode doSubstitute(@Nullable EditorContext editorContext, String pattern) {
                            String matchingText = getMatchingText(pattern);
                            SNode wrapper = SNodeOperations.cast(SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(subconcept), null), MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, "de.slisson.mps.mbeddr1687.structure.ExpressionStatement"));
                            SNodeOperations.replaceWithAnother(sourceNode, wrapper);
                            SLinkOperations.setTarget(wrapper, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), SNodeOperations.cast(sourceNode, MetaAdapterFactory.getConcept(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL, "de.slisson.mps.mbeddr1687.structure.Expression")));


                            SNode newChild = ListSequence.fromList(SNodeOperations.getChildren(wrapper)).findFirst(new IWhereFilter<SNode>() {
                              public boolean accept(SNode it) {
                                return it != sourceNode;
                              }
                            });
                            editorContext.flushEvents();
                            if (newChild == null) {
                              GrammarCellsUtil.selectCellWithText(editorContext, wrapper, matchingText);
                            } else {
                              SelectionUtil.selectNode(editorContext, newChild);
                            }

                            SavedCaretPosition caretPosition = new SavedCaretPosition(editorContext);
                            caretPosition.save();
                            Parser parser = new Parser(editorContext.getModel());
                            SNode rebalanced = parser.rebalanceIfRequired(parser.findRootExpression(wrapper));
                            if (rebalanced != null) {
                              editorContext.flushEvents();
                              caretPosition.restore();
                            }
                            return newChild;
                          }
                          public SAbstractConcept getOutputConcept() {
                            return subconcept;
                          }
                        }.getMultipleOrSingleAction(false)));
                        addSideTransformRemoval(_context);
                      }
                    }
                  }
                }
              }
            }
            return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
              public boolean accept(TransformationMenuItem it) {
                return it != null;
              }
            }).toListSequence();
          }
        }.query(_context)));
      }
    }
    {
      boolean sideEnabled = false;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
      if (sideEnabled) {
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
          public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
            List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
            return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
              public boolean accept(TransformationMenuItem it) {
                return it != null;
              }
            }).toListSequence();
          }
        }.query(_context)));
      }
    }

    return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
      public boolean accept(TransformationMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<SubstituteAction> getConstantReplaceActions(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context, final List<IToken> elementsBefore, final List<IToken> elementsAfter) {
    final List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());


    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteAction>() {
      public boolean accept(SubstituteAction it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<IRule> getRules(final SModel contextModel) {
    final List<IRule> rules = ListSequence.fromList(new ArrayList<IRule>());

    final Set<SLanguage> visibleLanguages = GrammarCellsUtil.getVisibleLanguages(contextModel);


    return rules;
  }
}
