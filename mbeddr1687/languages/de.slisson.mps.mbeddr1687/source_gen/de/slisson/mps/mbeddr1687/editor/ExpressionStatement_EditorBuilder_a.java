package de.slisson.mps.mbeddr1687.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.mpsutil.grammarcells.runtime.CellActionWithReadAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

/*package*/ class ExpressionStatement_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public ExpressionStatement_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_zedcwq_a();
  }

  private EditorCell createCollection_zedcwq_a() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_zedcwq_a");
    editorCell.setBig(true);
    editorCell.setCellContext(getCellFactory().getCellContext());
    editorCell.addEditorCell(createRefNode_zedcwq_a0());
    editorCell.addEditorCell(createCustomFactory_zedcwq_b0_0());
    return editorCell;
  }
  private EditorCell createRefNode_zedcwq_a0() {
    SingleRoleCellProvider provider = new ExpressionStatement_EditorBuilder_a.exprSingleRoleHandler_zedcwq_a0(myNode, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), getEditorContext());
    return provider.createCell();
  }
  private static class exprSingleRoleHandler_zedcwq_a0 extends SingleRoleCellProvider {
    @NotNull
    private SNode myNode;

    public exprSingleRoleHandler_zedcwq_a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(containmentLink, context);
      myNode = ownerNode;
    }

    @Override
    @NotNull
    public SNode getNode() {
      return myNode;
    }

    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = getUpdateSession().updateChildNodeCell(child);
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), child));
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(getNode(), MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), child));
      installCellInfo(child, editorCell);
      return editorCell;
    }



    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new SChildSubstituteInfo(editorCell, myNode, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"), child));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("expr");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(getNode(), MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_expr");
        installCellInfo(null, editorCell);
        setCellContext(editorCell);
        return editorCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no expr>";
    }
  }
  private EditorCell createCustomFactory_zedcwq_b0(final EditorContext editorContext, final SNode node) {


    final EditorCell cell = createConstant_zedcwq_a1a();
    EditorCell editorCell = new _FunctionTypes._return_P0_E0<EditorCell>() {
      public EditorCell invoke() {
        cell.setAction(CellActionType.DELETE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        cell.setAction(CellActionType.BACKSPACE, new CellActionWithReadAccess() {
          public void execute(EditorContext editorContext) {

            SNode unwrapped = SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr")));
            boolean caretLeft = false;
            if (caretLeft) {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.FIRST_CELL, 0);
            } else {
              SelectionUtil.selectLabelCellAnSetCaret(editorContext, unwrapped, SelectionManager.LAST_CELL, -1);
            }
          }
          @Override
          public boolean canExecute_inReadAction(EditorContext editorContext) {
            SNode replacement = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L, 0x246dff530ab3a3bbL, "expr"));
            SContainmentLink containmentLink = node.getContainmentLink();
            if (containmentLink == null) {
              return true;
            }
            SAbstractConcept expectedConcept = containmentLink.getTargetConcept();
            return expectedConcept == null || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(replacement)), SNodeOperations.asSConcept(expectedConcept));
          }
        });
        return cell;
      }
    }.invoke();
    return editorCell;
  }
  private EditorCell createCustomFactory_zedcwq_b0_0() {
    return createCustomFactory_zedcwq_b0(getEditorContext(), myNode);
  }
  private EditorCell createConstant_zedcwq_a1a() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ";");
    editorCell.setCellId("Constant_zedcwq_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
