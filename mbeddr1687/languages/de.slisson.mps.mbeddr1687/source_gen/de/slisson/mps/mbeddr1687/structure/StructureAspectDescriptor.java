package de.slisson.mps.mbeddr1687.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionStatement = createDescriptorForExpressionStatement();
  /*package*/ final ConceptDescriptor myConceptMethod = createDescriptorForMethod();
  /*package*/ final ConceptDescriptor myConceptNumberLiteral = createDescriptorForNumberLiteral();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptStatementList = createDescriptorForStatementList();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExpression, myConceptExpressionStatement, myConceptMethod, myConceptNumberLiteral, myConceptStatement, myConceptStatementList);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionStatement:
        return myConceptExpressionStatement;
      case LanguageConceptSwitch.Method:
        return myConceptMethod;
      case LanguageConceptSwitch.NumberLiteral:
        return myConceptNumberLiteral;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.StatementList:
        return myConceptStatementList;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "Expression", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL);
    b.class_(false, true, false);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953780666");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "ExpressionStatement", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b9L);
    b.class_(false, false, false);
    b.super_("de.slisson.mps.mbeddr1687.structure.Statement", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3c5L);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953780665");
    b.aggregate("expr", 0x246dff530ab3a3bbL).target(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL).optional(false).ordered(true).multiple(false).origin("2625034889953780667").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "Method", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab37ce8L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953770728");
    b.aggregate("body", 0x246dff530ab3a3c0L).target(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b8L).optional(false).ordered(true).multiple(false).origin("2625034889953780672").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumberLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "NumberLiteral", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a413L);
    b.class_(false, false, false);
    b.super_("de.slisson.mps.mbeddr1687.structure.Expression", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3baL);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953780755");
    b.prop("value", 0x246dff530ab3a414L, "2625034889953780756");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "Statement", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3c5L);
    b.class_(false, true, false);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953780677");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatementList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("de.slisson.mps.mbeddr1687", "StatementList", 0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3b8L);
    b.class_(false, false, false);
    b.origin("r:f031154e-41c0-4e40-bef3-e82e7a03234c(de.slisson.mps.mbeddr1687.structure)/2625034889953780664");
    b.aggregate("statements", 0x246dff530ab3a3c6L).target(0x356351fdbd414ac3L, 0x90a63afbbb7a6831L, 0x246dff530ab3a3c5L).optional(false).ordered(true).multiple(false).origin("2625034889953780678").done();
    return b.create();
  }
}
